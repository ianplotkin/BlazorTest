@page "/groceries"
@using BlazorTest.Data
@using BlazorTest.Data.Data.Models
@using BlazorTest.Utils
@using Microsoft.AspNetCore.Hosting;
@using Radzen;
@using Radzen.Blazor;
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager navigationManager
@inject JsConsole jsConsole
@inject DialogService DialogService
@inject IWebHostEnvironment Env
@*
    Using OwningComponentBase ensures that the service and related services
    that share its scope are disposed with the component.
    Otherwise DbContext in ForecastService will live for the life of the
    connection, which may be problematic if clients stay
    connected for a long time.
    We access WeatherForecastService using @Service
*@
@inherits OwningComponentBase<GroceryService>
    <RadzenDialog />

    <h1>Groceries</h1>


    <!-- AuthorizeView allows us to only show sections of the page -->
    <!-- based on the security on the current user -->
    <AuthorizeView>
        <!-- Show this section if the user is logged in -->
        <Authorized>
            @if (groceries == null)
            {
                <!-- Show this if the current user has no data... yet... -->
                <p><em>Loading...</em></p>
            }
            else
            {
                <div>
                    <RadzenTextBox class="col-xs-11" Placeholder="Add Item..." @oninput=@(args => AddTextChanged(args.Value.ToString())) />
                    <RadzenButton class="col-xs-1" Icon="add_circle_outline" style="margin-bottom: 10px" Text="Add" Click="@AddNewGrocery" />
                </div>
                <RadzenDataGrid class="col-xs-1" AllowFiltering="false"
                                @ref="groceriesGrid"
                                AllowColumnResize="false"
                                AllowGrouping="true"
                                Data="@displayedGroceries" TItem="Grocery"
                                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                Style="height:400px; margin-top:-60px"
                                Render="@OnRender">
                    @code {

                        RadzenDataGrid<Grocery> groceriesGrid;

                        void OnRender(DataGridRenderEventArgs<Grocery> args)
                        {
                            if (args.FirstRender)
                            {
                                args.Grid.Groups.Add(new GroupDescriptor() { Property = "Category.Name" });
                                StateHasChanged();
                            }
                        }
                    }
                    <GroupHeaderTemplate Context="data">
                        @data.Data.Key (@data.Data.Count)
                    </GroupHeaderTemplate>

                    <Columns>
                        @*<RadzenDataGridColumn TItem="Grocery" Width="40px" Sortable="false" Filterable="false">
                        <Template Context="grocery">
                            <RadzenCheckBox TriState="false" TValue="bool" Value=@(selectedGroceries.Contains(grocery))
                                            Change="@(args => OnChange(args, grocery))" />
                        </Template>
                    </RadzenDataGridColumn>*@
                        <RadzenDataGridColumn TItem="Grocery">
                            <Template Context="grocery">
                                <div class="row align-items-center">
                                    <div class="col-1">
                                        <RadzenCheckBox Style="border-radius: 4px;" TriState="false" TValue="bool" Value=@(selectedGroceries.Contains(grocery))
                                                        Change="@(args => OnChange(args, grocery))" />
                                    </div>
                                    <div class="col-11">
                                        <div class="row">
                                            <RadzenLabel Style="margin-left: 15px" Text="@grocery.Name" @onclick="@(args => EditRow(grocery))" />
                                        </div>
                                        <div class="row">
                                            <RadzenLabel Style="margin-left: 15px" Text=@(grocery.DefaultAmount + "  " + grocery.DefaultUnit) />
                                        </div>
                                    </div>
                                </div>
                            </Template>
                        </RadzenDataGridColumn>
                    </Columns>
                </RadzenDataGrid>
            }
        </Authorized>
        <!-- Show this section if the user is not logged in -->
        <NotAuthorized>
            <p>You're not signed in.</p>
        </NotAuthorized>
    </AuthorizeView>

    @code{

        async Task EditRow(Grocery grocery)
        {
            editingGrocery = grocery;

            var result = await DialogService.OpenAsync<GroceryEditor>($"Grocery {editingGrocery}",
            new Dictionary<string, object>() { { "editingGrocery", editingGrocery } , { "categories", categories} },
            new DialogOptions() { Left = "2px", Top = "20px", Width = "500px", Height = "400px" });


            System.Diagnostics.Debug.WriteLine($"Dialog result: {result}");
            if(result)
            {
                await Submit(editingGrocery);
            }
        }
    }